<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wy.test.persistence.mapper.RoleMemberMapper">

	<sql id="baseColumns">
		a.id,
		a.role_id,
		a.member_id,
		a.type,
		a.inst_id,
		a.create_user,
		a.create_time,
		a.update_user,
		a.update_time,
		a.deleted
	</sql>

	<sql id="where_contition">
		<if test="id != null and id != ''">
			and id = #{id}
		</if>
		<if test="name != null and name != ''">
			and name = #{name}
		</if>
	</sql>

	<select id="memberInRole" resultType="com.wy.test.core.vo.RoleMemberVO">
		select distinct
		rm.id as id,
		r.id as roleid,
		r.rolename,
		r.category category,
		u.username,
		u.usertype,
		u.windowsaccount,
		u.displayname ,
		u.nickname ,
		u.namezhspell,
		u.namezhshortspell,
		u.givenname ,
		u.middlename ,
		u.familyname ,
		u.gender,
		u.authntype,
		u.mobile,
		u.email,
		u.workemail,
		u.workphonenumber,
		u.employeenumber,
		u.division,
		u.costcenter,
		u.organization,
		u.departmentid,
		u.department,
		u.jobtitle,
		u.joblevel,
		rm.createddate,
		u.status
		from
		auth_user u,
		auth_role r,
		auth_role_member
		rm
		where u.instid = #{instId}
		and r.instid = #{instId}
		and rm.instid = #{instId}
		<if test="roleId != null and roleId != ''">
			and rm.roleid = #{roleId}
			and r.id = #{roleId}
		</if>
		<if test="roleName != null and roleName != ''">
			and r.rolename = #{roleName}
		</if>
		<if test="username != null and username != ''">
			and u.username = #{username}
		</if>
		<if test="displayName != null and displayName != ''">
			and u.displayname like '%${displayName}%'
		</if>
		and rm.type in( 'USER','USER-DYNAMIC')
		and rm.roleid = r.id
		and rm.memberid = u.id
	</select>

	<select id="memberNotInRole" resultType="com.wy.test.core.vo.RoleMemberVO">
		select distinct
		u.id,
		u.username,
		u.usertype,
		u.windowsaccount,
		u.displayname ,
		u.nickname ,
		u.namezhspell,
		u.namezhshortspell,
		u.givenname ,
		u.middlename ,
		u.familyname ,
		u.gender,
		u.authntype,
		u.mobile,
		u.email,
		u.workemail,
		u.workphonenumber,
		u.employeenumber,
		u.division,
		u.costcenter,
		u.organization,
		u.departmentid,
		u.department,
		u.jobtitle,
		u.joblevel,
		u.createdby,
		u.createddate,
		u.modifiedby,
		u.modifieddate,
		u.status
		from
		auth_user u
		where
		u.id not in(
		select
		rm.memberid
		from auth_role r,auth_role_member rm
		where 1 = 1
		<if test="roleId != null and roleId != ''">
			and rm.roleid = #{roleId}
			and r.id = #{roleId}
		</if>
		<if test="roleName != null and roleName != ''">
			and r.rolename = #{roleName}
		</if>
		and rm.type in( 'USER','USER-DYNAMIC')
		and rm.roleid = r.id
		)
		<if test="username != null and username != ''">
			and u.username = #{username}
		</if>
		<if test="displayName != null and displayName != ''">
			and u.displayname like '%${displayName}%'
		</if>
	</select>

	<select id="rolesNoMember" parameterType="com.wy.test.core.query.RoleMemberQuery"
		resultType="com.wy.test.core.vo.RoleVO">
		select distinct
		r.*
		from
		auth_role r
		where
		r.id not in(
		select
		rm.roleid
		from auth_role_member rm,auth_user u
		where
		rm.memberid
		= u.id
		<if test="username != null and username != ''">
			and u.username = #{username}
		</if>
		<if test="memberId != null and memberId != ''">
			and rm.memberid = #{memberid}
		</if>
		)
		<if test="roleName != null and roleName != ''">
			and r.rolename = #{roleName}
		</if>
	</select>

	<!-- ROLE_MEMBER ROLE Member -->
	<select id="roleMemberInRole" resultType="com.wy.test.core.vo.RoleVO">
		select distinct
		ig.*
		from
		auth_role ir,
		auth_role r,
		auth_role_member rm
		where
		1 = 1
		and rm.roleid = g.id
		and rm.memberid =
		ig.id
		and rm.type = 'ROLE'
		<if test="roleId != null and roleId != ''">
			and rm.roleid = #{roleId}
			and r.id = #{roleId}
		</if>
		<if test="roleName != null and roleName != ''">
			and r.rolename = #{roleName}
		</if>
	</select>

	<update id="addDynamicRoleMember" parameterType="com.wy.test.core.vo.RoleVO">
		insert into auth_role_member(
		id,
		roleid,
		memberid,
		type,
		instid
		)
		select
		concat('${id}_',u.id) id,
		'${id}' roleid,
		u.id
		memberid,
		'USER-DYNAMIC' type,
		'${instId}' instid
		from auth_user u
		where not exists(
		select 1 from auth_role_member rm
		where rm.roleid=#{id}
		and rm.memberid=u.id
		and rm.type='USER-DYNAMIC'
		)
		<if test="filters != null and filters != ''">
			and (${filters})
		</if>
		<if test="orgIdsList != null and orgIdsList != ''">
			and u.departmentid in( ${orgIdsList})
		</if>
	</update>

	<delete id="deleteDynamicRoleMember" parameterType="com.wy.test.core.vo.RoleVO">
		delete from auth_role_member rm
		where type = 'user-dynamic'
		and rm.role_id=#{id}
		and not exists(
		select 1
		from auth_user u
		where u.id=rm.memberid
		<if test="filters != null and filters != ''">
			and (${filters})
		</if>
		<if test="orgIdsList != null and orgIdsList != ''">
			and u.departmentid in ( ${orgIdsList})
		</if>
		)
	</delete>

	<select id="queryMemberByRoleId" parameterType="string" resultType="com.wy.test.core.vo.UserVO">
		select distinct
		r.roleId,
		r.roleName,
		u.id,
		u.username,
		u.usertype,
		u.windowsaccount,
		u.displayname ,
		u.nickname ,
		u.namezhspell,
		u.namezhshortspell,
		u.givenname ,
		u.middlename ,
		u.familyname ,
		u.gender,
		u.authntype,
		u.mobile,
		u.email,
		u.workemail,
		u.workphonenumber,
		u.employeenumber,
		u.division,
		u.costcenter,
		u.organization,
		u.departmentid,
		u.department,
		u.jobtitle,
		u.joblevel,
		rm.createddate,
		u.status
		from
		auth_user u,
		auth_role r,
		auth_role_member rm
		where 1 = 1
		and rm.roleid = #{value}
		and g.id = #{value}
		and rm.type in(
		'USER','USER-DYNAMIC')
		and rm.roleid = r.id
		and rm.memberid = u.id
	</select>

	<delete id="deleteByRoleId" parameterType="string">
		delete from auth_role_member rm
		where rm.roleid = #{value} and roleId
		!=
		'ROLE_ALL_USER'
	</delete>

</mapper>